--Copyright:Python 2.7.13

Python使用的是弱数据类型，变量不需要声明数据类型
u = 100
和C（强数据类型）不同的是，Python是在内存开辟一个空间，放入100这个数据，然后用u指向它
OS：有点像指针不是吗？
同一个变量名可以重复赋值，也可以在同一个变量名中赋值不同数据类型的值
u = 100
u = 'China'
在Python中是没有问题的，u = 'China'是在内存中新开一个空间（相对于100）放置，然后将u重新指向'China'而不是更改100这个数据本身
所以Python在执行的时候速度会比较慢（需要不停的重开地址）但代码量会比较少（相对于C）
尤其使用了第三方的库以后，几行代码可能就可以做出C几百行才能做到的工作

短路判定：
a=True
b=False
c=''
d='1'
a or b    因为a为真，所以结果为真，b不执行
c and d   因为c为假（空的赋值在Python等于False），d为真（非空的赋值在Python等于True），所以结果为假，d不执行
应用短路判定，可以做到如下例子
print d or b
输出的结果是：1而不是True
仅在变量为布尔型的时候才会输出True和False

list和tuple
list1=[1,2]   这是一个list
tuple1=(1,2)  这是一个tuple
list和tuple的一个基本的区别是，list的元素是可以更换的，可以进行插入、删除等等操作，而tuple的元素是不变的
PS：list和tuple里的元素可以是一个list或者一个tuple，换言之
list2=[1,[1,2]]是没有问题的

list和tuple的访问
list1[0],tuple1[0]是左边第一个
PS：list1[-1],tuple[-1]是倒数第一个

list操作
list1.append(3) 将3增加到list1的最后一个
list1.insert(1,'China') 将China插入到list1的第二个位置，list1变成3个元素的list
list1[1] = 'PRC' 将China改为PRC，替换操作
list1.pop() 删除list1的最后一个元素
PS：list1.pop(1) 删除list1的第二个元素，list1的元素个数减一
